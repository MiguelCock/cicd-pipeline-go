name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Usamos Ubuntu

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24' # Usa la versión de Go que necesites

      - name: Install dependencies
        run: go mod tidy

      - name: Run GoFmt (Formatter Check)
        run: test -z "$(gofmt -l .)" || (echo "Go files are not formatted. Run gofmt." && exit 1)

      - name: Run GolangCI-Lint (Linter)
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Run Unit Tests with Coverage
        run: go test ./... -coverprofile=coverage.out -v

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage.out

      - name: Run Acceptance Tests
        env:
          APP_BASE_URL: http://localhost:8000
        run: |
          # Start Go app in background (replace with your binary if needed)
          go build -o app .
          ./app &
          APP_PID=$!
          sleep 10

          # Install JS test deps (from ./tests/selenium)
          npm ci --prefix ./tests/selenium

          # Run Mocha acceptance tests
          npx mocha ./tests/selenium/runningTests.spec.js --reporter mocha-junit-reporter --reporter-options mochaFile=acceptance-report.xml --exit || true

          # Kill the Go app
          kill $APP_PID

      - name: Upload Test Reports Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            acceptance-report.xml
            tests/selenium/
              
            - name: SonarCloud Scan
              uses: SonarSource/sonarqube-scan-action@v5.0.0
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automáticamente proporcionado
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # El secreto que creaste
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # --- Pasos de Docker ---

      - name: Set up QEMU
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max