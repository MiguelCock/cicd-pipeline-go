name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Usamos Ubuntu

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00
        with:
          go-version: '1.24' # Usa la versión de Go que necesites

      - name: Install dependencies
        run: go mod tidy

      - name: Run GoFmt (Formatter Check)
        run: test -z "$(gofmt -l .)" || (echo "Go files are not formatted. Run gofmt." && exit 1)

      - name: Install golangci-lint (optional) 
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $GOPATH/bin v2.4.0

      - name: Run golangci-lint and write checkstyle
        run: |
          golangci-lint run --timeout=5m --output.checkstyle.path=golangci-lint-report.xml

      - name: Upload golangci-lint report
        uses: actions/upload-artifact@v4
        with:
          name: golangci-lint-report
          path: golangci-lint-report.xml

      - name: Run Unit Tests with Coverage
        run: go test . -o coverage.out -v

      - name: Upload Coverage Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: coverage-report
          path: coverage.out

      - name: Setup Chrome for Selenium
        uses: browser-actions/setup-chrome@latest

      - name: Run Acceptance Tests
        env:
          APP_BASE_URL: http://localhost:5000
        run: |
          # Start Go app in background
          go build -o app .
          ./app &
          APP_PID=$!
          sleep 15

          # Install JS test deps (from ./tests/selenium)
          cd ./tests/selenium
          npm ci

          # Run Mocha acceptance tests
          npx mocha runningTests.spec.js --reporter spec --exit || true
          cd ../..

          # Kill the Go app
          kill $APP_PID

      - name: Upload Test Reports Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: test-reports
          path: acceptance-report.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automáticamente proporcionado
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # El secreto que creaste

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # --- Pasos de Docker ---

      - name: Set up QEMU
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
